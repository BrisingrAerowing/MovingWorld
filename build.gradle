buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
            name = 'sonatype-snapshots'
            url = 'https://oss.sonatype.org/content/repositories/snapshots'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.0-20151205.212842-160'
    }
}

// Apply plugin
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

sourceCompatibility = '1.6'
targetCompatibility = '1.6'

version = "MC1.8-V1.8.1"
group = "darkevilmac.movingworld" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "movingworld"

minecraft {
    version = "1.8-11.14.4.1577"
    runDir = "run"

    replace '@MOVINGWORLDVER@', project.version

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20150602"
}

// Mixins
ext {
    mixinSrg = new File(project.buildDir, 'tmp/mixins/mixins.srg')
    mixinRefMap = new File(project.buildDir, "tmp/mixins/mixins.movingworld.refmap.json")
}

configurations {
    shade
    myCompile
    myCompile.extendsFrom shade
    compile.extendsFrom myCompile
}

// Repositories
repositories {
    mavenCentral()
    maven {
        url 'http://repo.spongepowered.org/maven'
    }
    maven {
        url 'https://oss.sonatype.org/content/groups/public'
    }
}

dependencies {
    shade 'org.spongepowered:mixin:0.4.5-SNAPSHOT'
}

// Jar shading and packaging configuration
jar {
    from project.mixinRefMap

    manifest {
        attributes(
                'MixinConfigs': 'mixins.movingworld.json',
                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'TweakOrder': '0',
                'FMLCorePlugin': 'darkevilmac.movingworld.common.asm.coremod.MovingWorldCoreMod',
                'FMLCorePluginContainsFMLMod': 'true',
                'ForceLoadAsMod': 'true',
                'FMLAT': 'MovingWorld_at.cfg'
        )
    }
    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            include "org/spongepowered/asm/**"
			include "com/google/api/services/analytics/**"
        }
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", minecraft.version

    // Replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // Replace the properties
        expand([
                'version'  : project.version,
                'mcversion': minecraft.version
        ])
    }

    // Copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// Compile options
compileJava {
    options.compilerArgs += [
            '-Xlint:-processing',
            "-AoutSrgFile=${project.mixinSrg.canonicalPath}",
            "-AoutRefMapFile=${project.mixinRefMap.canonicalPath}",
            "-AreobfSrgFile=${project.file('build/srgs/mcp-srg.srg').canonicalPath}"
    ]
}

// Copy the current srgs to the build dir so the user doesn't have to go hunting for them
task copySrgs(type: Copy, dependsOn: 'genSrgs') {
    from plugins.getPlugin("net.minecraftforge.gradle.forge").delayedFile(net.minecraftforge.gradle.common.Constants.DIR_MCP_MAPPINGS + '/srgs')

    include '**/*.srg'
    into 'build/srgs'
}

setupDecompWorkspace.dependsOn copySrgs
setupDevWorkspace.dependsOn copySrgs
compileJava.dependsOn copySrgs

// Configure reobfuscation for mixins
reobfJar.doFirst {
    if (project.mixinSrg.exists()) {
        addSecondarySrgFile project.mixinSrg
    }
}

idea {
    workspace {
        if (iws != null) {
            iws.withXml { xmlFile ->
                //Please don't kill me for my shitty groovy usage ;-;
                def runManager = xmlFile.asNode().component.find { it.@name == 'RunManager' }

                def minecraftClientDefaults = runManager.configuration.find {
                    it.@name == 'Minecraft Client' && it.@type == 'Application'
                }

                def minecraftServerDefaults = runManager.configuration.find {
                    it.@name == 'Minecraft Server' && it.@type == 'Application'
                }

                def minecraftClientVMArgs = '-Xincgc -Xmx1024M -Xms1024M -Dfml.coreMods.load=darkevilmac.movingworld.common.asm.coremod.MovingWorldCoreMod -Dmixin.debug=true'
                minecraftClientDefaults.option.find { it.@name == 'VM_PARAMETERS' }.replaceNode {
                    option(name: 'VM_PARAMETERS', value: minecraftClientVMArgs)
                }

                def minecraftServerVMArgs = '-Xincgc -Dfml.ignoreInvalidMinecraftCertificates=true -Dfml.coreMods.load=darkevilmac.movingworld.common.asm.coremod.MovingWorldCoreMod -Dmixin.debug=true'
                minecraftServerDefaults.option.find { it.@name == 'VM_PARAMETERS' }.replaceNode {
                    option(name: 'VM_PARAMETERS', value: minecraftServerVMArgs)
                }
            }
        }
    }
}