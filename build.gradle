buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = 'sponge'
            url = 'http://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.2-SNAPSHOT'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.2'
    }
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'idea'

version = 'MC1.8.9-INDEV'
group = "darkevilmac.movingworld"
archivesBaseName = "movingworld"

minecraft {
    version = "1.8.9-11.15.0.1695"
    runDir = "run"

    replace '@MOVINGWORLDVER@', project.version

    mappings = 'snapshot_20160112'
}

mixin {
    add sourceSets.main, "mixins.movingworld.refmap.json"
}

repositories {
    maven {
        name 'spongepowered'
        url 'https://repo.spongepowered.org/maven/'
    }
}

dependencies {
    compile('org.spongepowered:mixin:0.4.12-SNAPSHOT') {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
    }
}

shadowJar {
    exclude 'dummyThing'

    dependencies {
        include(dependency('org.spongepowered:mixin'))
    }

    classifier = 'full'
}

reobf {
    shadowJar {
        mappingType = 'NOTCH'
        classpath = sourceSets.main.compileClasspath
    }
}

build.dependsOn(shadowJar)

jar {
    manifest {
        attributes(
                'MixinConfigs': 'mixins.movingworld.json',
                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'TweakOrder': '0',
                'FMLCorePlugin': 'darkevilmac.movingworld.common.asm.coremod.MovingWorldCoreMod',
                'FMLCorePluginContainsFMLMod': 'true',
                'ForceLoadAsMod': 'true',
                'FMLAT': 'MovingWorld_at.cfg'
        )
    }
}

processResources
        {
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                expand 'version': project.version, 'mcversion': project.minecraft.version
            }

            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }


idea {
    workspace {
        if (iws != null) {
            iws.withXml { xmlFile ->
                //Please don't kill me for my shitty groovy usage ;-;
                def runManager = xmlFile.asNode().component.find { it.@name == 'RunManager' }

                def minecraftClientDefaults = runManager.configuration.find {
                    it.@name == 'Minecraft Client' && it.@type == 'Application'
                }

                def minecraftServerDefaults = runManager.configuration.find {
                    it.@name == 'Minecraft Server' && it.@type == 'Application'
                }

                def minecraftClientVMArgs = '-Xincgc -Xmx1024M -Xms1024M -Dfml.coreMods.load=darkevilmac.movingworld.common.asm.coremod.MovingWorldCoreMod -Dmixin.debug=true'
                minecraftClientDefaults.option.find { it.@name == 'VM_PARAMETERS' }.replaceNode {
                    option(name: 'VM_PARAMETERS', value: minecraftClientVMArgs)
                }

                def minecraftServerVMArgs = '-Xincgc -Dfml.ignoreInvalidMinecraftCertificates=true -Dfml.coreMods.load=darkevilmac.movingworld.common.asm.coremod.MovingWorldCoreMod -Dmixin.debug=true'
                minecraftServerDefaults.option.find { it.@name == 'VM_PARAMETERS' }.replaceNode {
                    option(name: 'VM_PARAMETERS', value: minecraftServerVMArgs)
                }
            }
        }
    }
}